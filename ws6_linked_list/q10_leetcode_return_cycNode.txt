/*
Uca batch

grp 2

@Raghav

24/08/2021
Leetcode
q-10 
return node from where cycle begins if it exists
/*
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

int checkCycle(struct ListNode *p)
{
    if(p==NULL)
        return 0;
    if(p!=NULL && p->next==NULL)
        return 0;
    if(p!=NULL && p->next==p)
        return 1;
    struct ListNode *slow=p,*fast=p;
    do{
        slow=slow->next;
        fast=fast->next;
        fast=fast?fast->next:fast;
    }while(slow!=NULL && fast!=NULL && slow!=fast);
    if(slow==fast)
        return 1;
    return 0;
}
struct ListNode *CycleNode(struct ListNode *p)
{
    struct ListNode *slow=p,*fast=p;
    do{
        slow=slow->next;
        fast=fast->next;
        fast=fast?fast->next:fast;
    }while(slow!=fast);
    fast=p;
    while(slow!=fast)
    {
        fast=fast->next;
        slow=slow->next;
    }
    return slow;
}
struct ListNode *detectCycle(struct ListNode *head) {
    struct Node *p=head;
    int cyc=checkCycle(p);
    if(cyc==0)
        return 0;
    else
    {
        struct ListNode *cycNode=CycleNode(p);
        return cycNode;
    }
    
}
