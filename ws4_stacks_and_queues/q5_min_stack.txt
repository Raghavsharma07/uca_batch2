Leetcode
@Raghav
Min Stack problem

11/08/2021

Code : 

typedef struct {
    int top; //keeps track of topmost elements
    int *min_val; //array to store min elements with min at top
    int *stack; //normal stack
    
} MinStack;

/** initialize your data structure here. */



//31 TEST CASES PASS out of 31

int top;
typedef struct { 
    int min_val ; 
    int value; 
    
} MinStack;

/** initialize your data structure here. */

MinStack* minStackCreate() {
    MinStack *m=(MinStack *)malloc(sizeof(MinStack)*30000);
    top=-1;
    return m;     
}

void minStackPush(MinStack* m, int val) {
    if(top==-1)
    {
        m[top+1].min_val=val;
        m[top+1].value=val;
        
    }
    else
    {
    if(val<m[top].min_val)
        m[top+1].min_val=val;
    else
        m[top+1].min_val=minStackGetMin(m);
    
    m[top+1].value=val;
    }
    top++;  
}

void minStackPop(MinStack* m) {
    top=top-1;
  
}

int minStackTop(MinStack* m) {
    if(top==-1)
        return NULL;
    return m[top].value;
  
}

int minStackGetMin(MinStack* m) {
    if(top==-1)
        return NULL;
    return m[top].min_val;
  
}

void minStackFree(MinStack* m) {
   
    free(m);
}
/**
 * Your MinStack struct will be instantiated and called as such:
 * MinStack* obj = minStackCreate();
 * minStackPush(obj, val);
 
 * minStackPop(obj);
 
 * int param_3 = minStackTop(obj);
 
 * int param_4 = minStackGetMin(obj);
 
 * minStackFree(obj);
*/
